
- ReactJs is not a framework, it is a library
- to create a react project we need npm(node package manager)
- we get the npm from node js and hence we have to install node js to create a react project
- how do we create a react project ?
------------------------------------
	- CRA (create-react-app)
        - outdated
	- vite
		- popularity for its speed and performance
		- bundling time is less, almost half the time CRA takes. beacause it uses ESModule bundling whereas CRA uses webpack	
		- HMR - Hot module replacement
- lets create a react project using vite
----------------------------------------
    - create a folder and open it in vscode
    - open the terminal in vscode(ctrl + `) and type the command
            npm create vite@latest
    - will ask for some options like name of project(give a name), framework(choose react - though react is not a framework), underlying language (choose javascript) 
    - now a react project is created without node modules folder
    - now use
        cd <project name>
    - now install node modules using
        npm install
            - this command will create the nodes modules folder based on package.json
    - now run the dev server
        npm run dev
            - this will start the development server
            - remember this is only a development server and not a production grade server
            - mostly for front end applications we use nginx as a production server
    - open a browser and copy the url displayed to see the index.html file of your react app
        http://localhost:5174/

jsx
    - javascript xml
    - an extension of javascript
    - generally in JS we cannot wirte Html
    - but in JSX we can write html tags in JS
    - react uses JSX

components are the building blocks of react
component is a section/part of the webpage
components are reusable
we already have a component called App
this is the root component
now we have to create our own componens and use them

components can be create using
    - class based components
        - if we want to work with life cycle methods, earlier we were able to use it only in class based components
    - function based components
        - preferred for its simplicity
        - later versions of react started supporting react hooks which can be used in function components
        - react hooks are equivalent to the lifecycle methods that was used in class based components

public folder vs src/assets folder
----------------------------------
- the assets inside the public folder is not bundled with the react project
- the assets inside the src/assets folder is bundled with the react project

how to create a funtion based component?
----------------------------------------



how to include CSS in react?
----------------------------
3 ways
    1. External CSS
        - it refers to index.css
        - this css file provides global styling to all the elements in the components
        - high possibility of css class names getting clashed
        - instead we can go for Module CSS
    2. Module CSS - we will use this
        - each component will have its own css file
        - here we will create module css file
        - for Fruits.jsx the css file will Fruits.module.css
        - advantage of module.css
            - the css class is applied by hashing it
            - because of this we can be 100% sure that no other css style will have the same class
    3. Inline CSS
        - here we can use the style attribute on the html element

props in React
--------------
    - we can work with parent components and child components
    - we place one component on another component
    - we may want to send data from parent component to child component 
    - this data can be sent using props

React Hooks
-----------
    - gives functional components access to use the states and manage side effects
    - it was introduced in React v16.8
    - make sure not to use react hooks in class based components, they are meant only
         for function based components
    - they generally start with use
    - eg: useState(), useEffect(), useContext(), useReducer(), useCallBack() and many more

useState()
----------
    - a react hook that basically allows the creation of a stateful variable and a setter function to update its value in the virtual DOM
    - an ordinary variable if changed does not get updated in the DOM

useEffect()
-----------
    - a react hook that tells React to do some code when (pick one)
        1. this components renders
        2. this component mounts
        3. the state value is changed
    - a useEffect hook looks like ----> useEffect(function, [dependencies])
    - useEffect(() => {})                     // runs after every re-render
    - useEffect(() => {}, [])                 // runs only on mount
    - useEffect(() => {}, [statevariable])    // run on mount + when state value changes

useNavigate()
------------
    - a react hook that is used to route to a component from a function of the component
    
useParams()
----------
    - associated with routing
    - used to extract the route parameters from the rout url
    - use object destructuring
        const { bid } = useParams();

Handling form and form validation in React
------------------------------------------
    - create the necessary form
    - as and when we make changes to the form data/elements capture it inside student state object
    - when the form is submitted , stop the submission
    - and start validating the student object properties
    - accumulate all the validation errors in an object and store in a state object called errors
    - display the error messages which in errors state object below each form input element


React routing on client side
----------------------------
    - here we can move/navigate from one component to another component
    - this is called routing on the client side
    - for this we will use react-router-dom
    - and react-router-dom is not available by default in the node_module - check in package.json
    - so now install react-router-dom library
            npm install react-router-dom
    - now lets start with routing
    - general steps
        - first configure route paths for the components
            - for this we will use createBrowserRouter()
            - <BrowserRouter> is outdated, it was used earlier and still some app uses it
            - we will configure the route paths in main.jsx using createBrowserRouter()
        - second use <RouterProvider>which will list all the route paths
            - specify this in main.jsx and comment out <App/>
    - routing with <Header> and hyperlinks
    --------------------------------------
        - create Header component
            - use <Link> instead <a>. 
            - <a> will reload the entire page from server. This kills the purpose of SPA in front end.
        - make some changes in the route variable in main.jsx
            const route = createBrowserRouter([
            {
                path: "/",
                element: <App />,
                children: [
                { path: "/display", element: <Display />},
                { path: "/counter", element: <Counter />},
                { path: "/todo", element: <Todo />},
                { path: "/student-add", element: <StudentAddForm />}
                ],
            },
            ]);
        - in App.jsx include <Header/> and below that use <Outlet/>
        - <Outlet/> tells where the routed component should be displayed
    - routing can be done in 2 ways
    -------------------------------
        1. using <Link>
            - used when we want to route by clicking on a link
        2. using useNavigate() hook
            - used when we want to route by clicking on a button that calls a method
    - working with route parameters
    -------------------------------


fetch API to consume endpoints from backend
-------------------------------------------
    - we will use fetch API to consume the endpoints of back end application
    - fetch api is provided by javascript and not react
    - other apis are axios
    - we will create a component which comsumes a fake endpoint provided by

    


creating bms-front-end
----------------------
    - make sure to use @CrossOrigin annotation above the controller classes in the backend application


further
-------
React + Redux(state management)